#!/bin/bash
# vim: set ft=sh

set -e

exec 3>&1 # make stdout available as fd 3 for the result
exec 1>&2 # redirect all output to stderr for logging

ASSETS=$(cd "$(dirname "$0")" && pwd)
source $ASSETS/helpers/git.sh
source $ASSETS/helpers/utils.sh
source $ASSETS/helpers/bitbucket.sh

# for all temporary files in 'out'
tmpfile() {
  tmp_file_unique "out-$1"
}

source=$1

if [ -z "$source" ]; then
  echo "usage: $0 <path/to/source>"
  exit 1
fi

# for jq
PATH=/usr/local/bin:$PATH

payload=$(tmpfile request)

cat > "$payload" <&0

load_pubkey "$payload"
configure_credentials "$payload"

skip_ssl_verification=$(jq -r '.source.skip_ssl_verification // false' < ${payload})
uri=$(jq -r '.source.uri // ""' < "$payload")
git_config_payload=$(jq -r '.source.git_config // []' < "$payload")
rebuild_phrase=$(jq -r '.source.rebuild_phrase // "test this please"' < "$payload")

path=$(jq -r '.params.path // ""' < "$payload")
status=$(jq -r '.params.status // ""' < "$payload")
additionnal_comment=$(jq -r '.params.comment // ""' < "$payload")
additionnal_comment_file=$(jq -r '.params.commentFile // ""' < "$payload")

configure_git_ssl_verification "$skip_ssl_verification"
configure_git_global "${git_config_payload}"

if [ -z "$uri" ]; then
  log "invalid payload (missing uri)"
  exit 1
fi

if [ -z "$path" ]; then
  log "invalid payload (missing path)"
  exit 1
fi

if [ -z "$status" ]; then
  log "invalid payload (missing status)"
  exit 1
fi

cd "$source"

if [ -n "$additionnal_comment_file" ]; then
  additionnal_comment="$(<${additionnal_comment_file})"
fi

cd "$path"
prq_id=$(git config --get pullrequest.id | cat)
prq_title=$(git config --get pullrequest.title | cat)
prq_from=$(git config --get pullrequest.from | cat)
prq_to=$(git config --get pullrequest.to | cat)
prq_commit=$(git config --get pullrequest.commit | cat)
prq_date=$(git config --get pullrequest.date | cat)
prq_change=$(git config --get pullrequest.change | cat)

ls_remote="$(git ls-remote "$uri")"
source_commit=$(echo "$ls_remote" | grep "$prq_from" | awk '{print $1}')
target_commit=$(echo "$ls_remote" | grep "$prq_to" | awk '{print $1}')

if [ -z "$prq_id" ]; then
  log "Can't determine pull request id for commit $prq_commit"
  exit 1
fi

if [ -z "$source_commit" ]; then
  log "Failed to determine pull request hash from id $prq_id in \n$ls_remote"
  exit 1
fi

case "$status" in
  success)
    build_state="SUCCESSFUL"
    ;;
  failure)
    build_state="FAILED"
    ;;
  pending)
    build_state="INPROGRESS"
    ;;
  *)
    log "status '$status' is not supported -- only success, failure or pending"
    exit 1
esac


# determine repository name for calling REST api
repo_name=$(basename "$uri" | sed "s/.git$//")
repo_project=$(basename $(dirname "$uri"))

# parse uri and retrieve host
uri_parser "$uri"
repo_host="${uri_schema}://${uri_address}"

build_key="$BUILD_TEAM_NAME-$BUILD_PIPELINE_NAME-$BUILD_JOB_NAME"
build_name="Concourse $BUILD_TEAM_NAME: $BUILD_PIPELINE_NAME - $BUILD_JOB_NAME - #$BUILD_NAME"
build_url="$ATC_EXTERNAL_URL/teams/$BUILD_TEAM_NAME/pipelines/$BUILD_PIPELINE_NAME/jobs/$BUILD_JOB_NAME/builds/$BUILD_NAME"
build_description="Concourse build for PRQ #$prq_id @ $ATC_EXTERNAL_URL"

data=$(jq -cn "{
  state: \"$build_state\",
  key: \"$build_key\",
  name: \"$build_name\",
  url: \"$build_url\",
  description: \"$build_description\"
}")

# set commit build status for source commit
bitbucket_pullrequest_commit_status "$repo_host" "$repo_project" "$repo_name" "$source_commit" "$data" "" "$skip_ssl_verification" > /dev/null

# Add branch name to additional comment
if [ -n "$additionnal_comment" ]; then
  additionnal_comment="${additionnal_comment//\[\[BRANCH\]\]/$prq_from}"
fi

# add comment to pull request to track if build was started/finished
comment_message=$(bitbucket_pullrequest_progress_comment "$status" "$source_commit" "$target_commit" "$additionnal_comment")
comments=$(bitbucket_pullrequest_overview_comments "$repo_host" "$repo_project" "$repo_name" "$prq_id" "" "$skip_ssl_verification" | jq -c '.[]')
commented=""
if [ -n "$comments" ]; then
  while read -r comment; do
    id=$(echo "$comment" | jq -r '.id')
    text=$(echo "$comment" | jq -r '.text')

    # check for progress messages => if pull request number matches then edit comment (instead of creating a new one)
    if [ -z "$commented" ]; then
      if bitbucket_pullrequest_progress_commit_match "$text" "$source_commit" "Started"; then
        bitbucket_pullrequest_update_comment_status "$repo_host" "$repo_project" "$repo_name" "$prq_id" "$comment_message" "$id" "" "$skip_ssl_verification" >/dev/null
        commented=true
        break
      fi
    fi
  done <<< "$comments"
fi

if [ -z "$commented" ]; then
  bitbucket_pullrequest_add_comment_status "$repo_host" "$repo_project" "$repo_name" "$prq_id" "$comment_message" "" "$skip_ssl_verification" >/dev/null
fi

jq -n "{
  version: {
    id: \"$prq_id\",
    title: \"$prq_title\",
    commit: \"$prq_commit\",
    from: \"$prq_from\",
    to: \"$prq_to\",
    date: \"$prq_date\",
    change: \"$prq_change\"
  },
  metadata: $(pullrequest_metadata "$prq_id" "$uri" "$skip_ssl_verification")
}" >&3
