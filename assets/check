#!/bin/bash
# vim: set ft=sh

set -e
set -o pipefail

exec 3>&1 # make stdout available as fd 3 for the result
exec 1>&2 # redirect all output to stderr for logging

ASSETS=$(cd "$(dirname "$0")" && pwd)
source $ASSETS/helpers/git.sh
source $ASSETS/helpers/utils.sh
source $ASSETS/helpers/bitbucket.sh

# for all temporary files in 'check'
tmpfile() {
  tmp_file "check-$1"
}

# for jq
PATH=/usr/local/bin:$PATH

payload=$(tmpfile request)

cat > "$payload" <&0

log "Configuring git credentials"
load_pubkey "$payload"

configure_credentials "$payload"

log "Parsing payload"
uri=$(jq -r '.source.uri // ""' < "$payload")
skip_ssl_verification=$(jq -r '.source.skip_ssl_verification // false' < ${payload})
git_config_payload=$(jq -r '.source.git_config // []' < "$payload")
current_version=$(jq -r '.version // ""'  < "$payload")
current_version_timestamp=$(jq -r '.version.change // 0' < "$payload")
only_for_branch=$(jq -r '.source.only_for_branch // "."' < "$payload")
only_without_conflicts=$(jq -r '.source.only_without_conflicts // "true"' < "$payload")
rebuild_phrase=$(jq -r '.source.rebuild_phrase // "test this please"' < "$payload")

configure_git_ssl_verification "$skip_ssl_verification"
configure_git_global "${git_config_payload}"

if [ -z "$uri" ]; then
  log "invalid payload (missing uri):" "$(cat $payload)"
  exit 1
fi

versions="[]"

log "Calculating repository specifics"
# determine repository name for calling REST api
repo_name=$(basename "$uri" | sed "s/.git$//")
repo_project=$(basename $(dirname "$uri"))

# parse uri and retrieve host
uri_parser "$uri"
repo_host="${uri_schema}://${uri_address}"

# collect all open pull requests
pull_requests_json=$(bitbucket_pullrequests "$repo_host" "$repo_project" "$repo_name" "" "$skip_ssl_verification")
pull_requests="$(echo $pull_requests_json | jq -r '.[] | [.id, .title, .source.commit.hash, .source.branch.name, .destination.branch.name]|@tsv')"
if [ -n "$pull_requests" ]; then
  # Check if the current version is still valid
  if [[ "$current_version_timestamp" -gt 0 ]] && (jq -e --argjson version "$current_version" '.[] | select(.id == ($version.id//0|tonumber) and .source.commit.hash == $version.commit)' > /dev/null <<< "$pull_requests_json");
  then
      versions="[$current_version]"
  fi

  # for each pr in the list
  while IFS=$'\t' read -r prq_number prq_title prq_commit prq_from prq_to; do
    log "Verifying pull request #${prq_number}"
    # Select all updates or comments with rebuild phrase, and pick last date
    last_commit_change_date=$(bitbucket_pull_request_activity "$repo_host" "$repo_project" "$repo_name" "$prq_number" "" "$skip_ssl_verification" \
      | jq -r "[map(select(.update.state == \"OPEN\" or .comment.content.raw == \"$rebuild_phrase\")) | .[] | {date: (.update.date//.comment.updated_on)}] | max_by(.date).date")
    # simpler version - select all updates and pick last one
    #  | jq -r 'map(select(.update.state == "OPEN"))| max_by(.update.date).update.date')
    timestamp=$(date -d "$last_commit_change_date" +%s)
    pretty_date=$(date -d $last_commit_change_date)
    echo "====== PR #$prq_number. Last commit timestamp: $timestamp"
    # if the timestamp is less than current version, ignore it
    if [[ "$timestamp" -le "$current_version_timestamp" ]]; then
      continue
    fi

    if [[ "$prq_to" =~ $only_for_branch ]]; then
      if [ "$only_without_conflictts" == "true" ]; then
        pr_diff=$(bitbucket_pullrequest_diff "$repo_host" "$repo_project" "$repo_name" "${prq_commit:0:6}" "${to_hash:0:6}" "" "$skip_ssl_verification")
        if [ "$only_without_conflicts" == "true" ]; then
          # detect conflicts by presence of the specific characters
          if grep -q "<<<<<<<" <<< "$pr_diff"; then
            continue;
          fi
        fi
      fi

      versions+=" + [{ id: \"$prq_number\", title: \"$prq_title\", commit: \"$prq_commit\", from: \"$prq_from\", to: \"$prq_to\", date: \"$pretty_date\", change: \"$timestamp\" }]"
    fi
  done <<< "$pull_requests"
fi

jq -n "$versions | sort_by(.change)"  >&3